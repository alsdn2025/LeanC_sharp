using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

// C#은 굉장히 고지식한 객체지향 언어. 
// 이 말은 즉슨, C#은 클래스의 노예라는 뜻. 
// 모든 길은 Class로 통한다 --> 좀 간지나는데??
// 다른 언어들은 안그런 녀석들도 있음. 
// But C# -> 클래스를 설명하지 않고는 사실 무언가를 설명한다는 것이 의미가 없는 수준.
// 여러분들은 앞으로 게임을 만들고 싶어할 것입니다. 
// 게임이라는 것은 굉장히 다양한 개념들을 품고 있다. 
// 적, 아군, 돈, 능력치, 맵 등등등등등ㄷ
// 객체징향은 저 중에서 적절히 묶어 클래스화라는 걸 시킨다. 
// 그걸 표현하는 것이 클래스. 


// 객체지향 프로그래밍의 가장 핵심적인 내용을 설명하고 있는 것. 
// class(클래스를 선언하기 위한 키워드) 이름
// { < - 클래스의 내용의 시작. 
// }

// 객체지향 --> 내가 표현하고 싶은걸 클래스로 만들어서 그 클래스로 객체를 만드는 프로그래밍이다. 객체를 기반으로 모든걸 해결하기 때문에 객체를 지향(향한다)할수 밖에 없는 프로그래밍. 
// 블럭을 모아 부품을 만든다(class화) -> 부품으로 레고를 만든다(객체화) --> 레고를 모아서 논다(game)
// 수 천만개의 블럭이 있고 수 조억개의 조합이 있겠지. 

// 구현과 개념이 분리되지 않는다. 
// 내가 생각한 개념이
// 내 프로그램에서 사용되어 지기 위한
// 설계도를 의미하게 된다. 코딩에서는 무조건 설계도가 먼저다. 


class Inven
{

}


class Player
{

}

class Pet
{

}

class Monster
{
    //사실 내용은 중요하지 않아!!!!
    //내용보다 중요한 건 개념을 깨우치는 것. 

}